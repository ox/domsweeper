// Generated by CoffeeScript 1.3.3
(function() {
  var game;

  game = {
    announceWin: function() {
      return $('#announcement').addClass('alert-box success').text('You won!');
    },
    announceLoss: function() {
      return $('#announcement').addClass('alert-box alert').text('You lost!');
    },
    resetAnnouncement: function() {
      return $('#announcement').removeAttr('class').text('');
    }
  };

  $(function() {
    var newGame;
    newGame = function() {
      game.resetAnnouncement();
      game.Square = Backbone.Model.extend({
        defaults: {
          hasBeenClicked: false,
          isFlagged: false
        },
        click: function() {
          this.set({
            'hasBeenClicked': true
          });
          return this;
        },
        flag: function() {
          this.set({
            'isFlagged': true
          });
          console.log('wtf');
          return this;
        },
        numSurroundingMines: function() {
          var mines,
            _this = this;
          mines = _.filter(this.surroundingSquares(), function(id) {
            return _this.collection.at(id).get('isMine');
          });
          return mines.length;
        },
        surroundingSquares: function() {
          var bottom, bottomLeft, bottomRight, cols, left, right, rows, squares, top, topLeft, topRight;
          rows = this.collection.rows;
          cols = this.collection.cols;
          squares = [];
          left = this.id % rows === 0 ? void 0 : this.id - 1;
          right = this.id % rows === rows - 1 ? void 0 : this.id + 1;
          top = this.id - cols < 0 ? void 0 : this.id - cols;
          bottom = this.id + cols > rows * cols - 1 ? void 0 : this.id + cols;
          topLeft = left && top ? top - 1 : void 0;
          topRight = right && top ? top + 1 : void 0;
          bottomLeft = left && bottom ? bottom - 1 : void 0;
          bottomRight = right && bottom ? bottom + 1 : void 0;
          squares = [left, right, top, bottom, topLeft, topRight, bottomLeft, bottomRight];
          return squares.filter(function(square) {
            return square !== void 0;
          });
        }
      });
      game.Board = Backbone.Collection.extend({
        model: game.Square,
        initialize: function(rows, cols, numMines) {
          this.rows = rows != null ? rows : 8;
          this.cols = cols != null ? cols : 8;
          this.numMines = numMines != null ? numMines : 10;
          this.gameOver = false;
          this.lost = false;
          return this.generateSquares(this.rows, this.cols, this.numMines);
        },
        generateSquares: function(rows, cols, numMines) {
          var i, square, squares, _i, _j, _len, _ref, _results;
          squares = _.shuffle((function() {
            _results = [];
            for (var _i = 0, _ref = rows * cols - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this));
          for (i = _j = 0, _len = squares.length; _j < _len; i = ++_j) {
            square = squares[i];
            this.add(new game.Square({
              isMine: square < numMines,
              id: i
            }));
          }
          return this;
        },
        numClicked: function() {
          return this.size();
        },
        hitMine: function() {
          this.gameOver = true;
          this.lost = true;
          _.each(this.models, function(square) {
            return square.click();
          });
          return game.announceLoss();
        },
        checkIfWon: function() {
          var won;
          won = !this.lost && _.all(this.models, function(square) {
            return (square.get('isMine') && !square.get('hasBeenClicked')) || (!square.get('isMine') && square.get('hasBeenClicked'));
          });
          if (won) {
            _.each(this.models, function(square) {
              return square.off('change');
            });
            this.gameOver = true;
            return game.announceWin();
          }
        }
      });
      game.board = new game.Board();
      game.SquareView = Backbone.View.extend({
        tagName: 'a',
        className: 'center square',
        template: _.template($('#square_template').html()),
        attributes: {
          'href': '#',
          'oncontextmenu': 'return false;'
        },
        events: {
          'mousedown': 'click'
        },
        initialize: function() {
          this.model.on('change', this.render, this);
          return this.model.on('change', this.model.collection.checkIfWon, this.model.collection);
        },
        render: function() {
          this.$el.html(this.template(this.model.toJSON()));
          if (this.model.get('hasBeenClicked')) {
            this.$el.addClass('clicked');
            this.reveal();
          } else if (this.model.get('isFlagged')) {
            this.$el.addClass('flagged');
          }
          return this;
        },
        click: function() {
          event.preventDefault();
          switch (event.which) {
            case 1:
              this.model.click();
              break;
            case 3:
              this.model.flag();
          }
          return this;
        },
        reveal: function() {
          var numSurroundingMines,
            _this = this;
          this.$el.removeClass('flagged');
          if (this.model.get('isMine')) {
            this.$el.addClass('mine');
            if (!game.board.gameOver) {
              game.board.hitMine();
            }
          } else {
            numSurroundingMines = this.model.numSurroundingMines();
            this.$el.text(numSurroundingMines);
            if (numSurroundingMines === 0) {
              _.each(this.model.surroundingSquares(), function(id) {
                var square;
                square = _this.model.collection.at(id);
                if (!square.get('isMine') && !square.get('hasBeenClicked')) {
                  return square.click();
                }
              });
            }
          }
          return this;
        }
      });
      game.BoardView = Backbone.View.extend({
        id: 'board',
        template: _.template($('#board_template').html()),
        initialize: function() {
          return this.render();
        },
        render: function() {
          var _this = this;
          game.board.each(function(square) {
            var squareView;
            squareView = new game.SquareView({
              model: square
            });
            return _this.$el.append(squareView.render().el);
          });
          return $('#game').html(this.el);
        }
      });
      return game.boardView = new game.BoardView();
    };
    $('#new_game_button').on('click', newGame);
    return newGame();
  });

}).call(this);
