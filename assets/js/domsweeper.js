// Generated by CoffeeScript 1.3.3
(function() {

  window.app = {};

  $(function() {
    app.Square = Backbone.Model.extend({
      defaults: {
        hasBeenClicked: false,
        isFlagged: false
      },
      click: function() {
        this.set({
          'hasBeenClicked': true
        });
        return this;
      },
      getID: function() {
        return parseInt(this.cid.substring(1));
      },
      numSurroundingMines: function() {
        var count, surroundingSquares,
          _this = this;
        surroundingSquares = this.surroundingSquares();
        count = 0;
        _.each(surroundingSquares, function(id) {
          if (id && _this.collection.getByCid("c" + id).get('isMine')) {
            return count++;
          }
        });
        console.log(count);
        return count;
      },
      surroundingSquares: function() {
        var bottom, bottomLeft, bottomRight, cid, cols, left, right, rows, top, topLeft, topRight;
        cid = this.getID();
        rows = this.collection.rows;
        cols = this.collection.cols;
        left = cid % rows === 0 ? void 0 : cid - 1;
        right = cid % rows === rows - 1 ? void 0 : cid + 1;
        top = cid - cols < 0 ? void 0 : cid - cols;
        bottom = cid + cols > rows * cols - 1 ? void 0 : cid + cols;
        topLeft = left && top ? top - 1 : void 0;
        topRight = right && top ? top + 1 : void 0;
        bottomLeft = left && bottom ? bottom - 1 : void 0;
        bottomRight = right && bottom ? bottom + 1 : void 0;
        return {
          left: left,
          right: right,
          top: top,
          bottom: bottom,
          topLeft: topLeft,
          topRight: topRight,
          bottomLeft: bottomLeft,
          bottomRight: bottomRight
        };
      }
    });
    app.Board = Backbone.Collection.extend({
      model: app.Square,
      initialize: function(rows, cols, numMines) {
        this.rows = rows != null ? rows : 8;
        this.cols = cols != null ? cols : 8;
        this.numMines = numMines != null ? numMines : 10;
        return this.generateSquares(this.rows, this.cols, this.numMines);
      },
      generateSquares: function(rows, cols, numMines) {
        var square, squares, _i, _j, _len, _ref, _results;
        squares = _.shuffle((function() {
          _results = [];
          for (var _i = 0, _ref = rows * cols - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this));
        for (_j = 0, _len = squares.length; _j < _len; _j++) {
          square = squares[_j];
          this.add(new app.Square({
            isMine: square < numMines
          }));
        }
        return this;
      },
      numClicked: function() {
        return this.size();
      }
    });
    app.board = new app.Board();
    app.SquareView = Backbone.View.extend({
      tagName: 'a',
      className: 'square',
      template: _.template($('#square_template').html()),
      attributes: {
        'href': '#'
      },
      events: {
        'click': 'click'
      },
      initialize: function() {
        return this.model.on('change', this.render, this);
      },
      render: function() {
        this.$el.html(this.template(this.model.toJSON())).text(this.model.getID());
        return this;
      },
      click: function() {
        event.preventDefault();
        this.model.click();
        this.reveal();
        return this;
      },
      reveal: function() {
        var numSurroundingMines;
        if (this.model.get('isMine')) {

        } else {
          numSurroundingMines = this.model.numSurroundingMines();
        }
        return this;
      }
    });
    app.BoardView = Backbone.View.extend({
      id: 'board',
      template: _.template($('#board_template').html()),
      initialize: function() {
        return this.render();
      },
      render: function() {
        var _this = this;
        app.board.each(function(square) {
          var squareView;
          squareView = new app.SquareView({
            model: square
          });
          return _this.$el.append(squareView.render().el);
        });
        return $('#game').html(this.el);
      }
    });
    return app.boardView = new app.BoardView();
  });

}).call(this);
